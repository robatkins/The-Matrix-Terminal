{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'HelloWorld',\n  mounted() {\n    this.startAnimation();\n  },\n  methods: {\n    startAnimation() {\n      const textElement = this.$el.querySelector('.editor-text');\n      function set(txt) {\n        textElement.innerHTML = txt;\n      }\n      function slicer(str) {\n        const sliced = [];\n        for (let i = 0; i <= str.length; i++) {\n          sliced.push(str.slice(0, i));\n        }\n        return sliced;\n      }\n      function pause(str, time) {\n        const strings = [];\n        for (let i = 0; i < time; i++) {\n          strings.push(str);\n        }\n        return strings;\n      }\n      function assemble(statements) {\n        let slices = [];\n        statements.forEach(function (stmt) {\n          const sliced = slicer(stmt);\n          const interstatementPause = pause(\"\", 3);\n          slices = slices.concat(sliced);\n          slices = slices.concat(pause(stmt, 30));\n          slices = slices.concat(interstatementPause);\n        });\n        return slices;\n      }\n      const statements = [\"Wake up, Neo...\", \"The Matrix has you...\", \"Follow the white rabbit.\", \"Knock, knock, Neo.\"];\n      function rand(min, max) {\n        return min + Math.random() * (max - min) | 0;\n      }\n      const slices = assemble(statements);\n      function animate() {\n        const current = slices.shift();\n        set(current);\n        slices.push(current);\n        setTimeout(animate, rand(50, 250));\n      }\n      animate();\n    }\n  }\n};","map":{"version":3,"names":["name","mounted","startAnimation","methods","textElement","$el","querySelector","set","txt","innerHTML","slicer","str","sliced","i","length","push","slice","pause","time","strings","assemble","statements","slices","forEach","stmt","interstatementPause","concat","rand","min","max","Math","random","animate","current","shift","setTimeout"],"sources":["/Users/arkana/react-apps/matrix/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"scanlines\"></div>\n    <div class=\"matrix-background\">\n      <div class=\"raining-text\">\n        <div class=\"editor-text\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  mounted() {\n    this.startAnimation();\n  },\n  methods: {\n    startAnimation() {\n      const textElement = this.$el.querySelector('.editor-text');\n      \n      function set(txt) {\n        textElement.innerHTML = txt;\n      }\n\n      function slicer(str) {\n        const sliced = [];\n        for (let i = 0; i <= str.length; i++) {\n          sliced.push(str.slice(0, i));\n        }\n        return sliced;\n      }\n\n      function pause(str, time) {\n        const strings = [];\n        for (let i = 0; i < time; i++) {\n          strings.push(str);\n        }\n        return strings;\n      }\n\n      function assemble(statements) {\n        let slices = [];\n        statements.forEach(function (stmt) {\n          const sliced = slicer(stmt);\n          const interstatementPause = pause(\"\", 3);\n          slices = slices.concat(sliced);\n          slices = slices.concat(pause(stmt, 30));\n          slices = slices.concat(interstatementPause);\n        });\n        return slices;\n      }\n\n      const statements = [\n        \"Wake up, Neo...\",\n        \"The Matrix has you...\",\n        \"Follow the white rabbit.\",\n        \"Knock, knock, Neo.\"\n      ];\n\n      function rand(min, max) {\n        return min + Math.random() * (max - min) | 0;\n      }\n\n      const slices = assemble(statements);\n\n      function animate() {\n        const current = slices.shift();\n        set(current);\n        slices.push(current);\n        setTimeout(animate, rand(50, 250));\n      }\n\n      animate();\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import url('https://fonts.googleapis.com/css?family=Ubuntu+Mono');\n\n$text-color: #9F9;\n$shadow: #0F0;\n\nbody {\n  background: #010;\n  filter: blur(1px);\n  overflow: hidden;\n}\n\n.scanlines {\n  pointer-events: none;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  \n  background-image: linear-gradient(#020 0%, transparent 25%);\n  background-size: 4px 4px;\n}\n\n.editor-text {\n  color: $text-color;\n  font-size: 3em;\n  text-shadow: 1px 0px 5px $shadow, \n    -1px 0px 2px $shadow;\n  font-family: 'Ubuntu Mono', monospace;\n  font-weight: light;\n  line-height: 2em;\n  margin: 100px;\n}\n</style>"],"mappings":";AAYA,eAAe;EACbA,IAAI,EAAE,YAAY;EAClBC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACPD,cAAcA,CAAA,EAAG;MACf,MAAME,WAAU,GAAI,IAAI,CAACC,GAAG,CAACC,aAAa,CAAC,cAAc,CAAC;MAE1D,SAASC,GAAGA,CAACC,GAAG,EAAE;QAChBJ,WAAW,CAACK,SAAQ,GAAID,GAAG;MAC7B;MAEA,SAASE,MAAMA,CAACC,GAAG,EAAE;QACnB,MAAMC,MAAK,GAAI,EAAE;QACjB,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,IAAKF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;UACpCD,MAAM,CAACG,IAAI,CAACJ,GAAG,CAACK,KAAK,CAAC,CAAC,EAAEH,CAAC,CAAC,CAAC;QAC9B;QACA,OAAOD,MAAM;MACf;MAEA,SAASK,KAAKA,CAACN,GAAG,EAAEO,IAAI,EAAE;QACxB,MAAMC,OAAM,GAAI,EAAE;QAClB,KAAK,IAAIN,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIK,IAAI,EAAEL,CAAC,EAAE,EAAE;UAC7BM,OAAO,CAACJ,IAAI,CAACJ,GAAG,CAAC;QACnB;QACA,OAAOQ,OAAO;MAChB;MAEA,SAASC,QAAQA,CAACC,UAAU,EAAE;QAC5B,IAAIC,MAAK,GAAI,EAAE;QACfD,UAAU,CAACE,OAAO,CAAC,UAAUC,IAAI,EAAE;UACjC,MAAMZ,MAAK,GAAIF,MAAM,CAACc,IAAI,CAAC;UAC3B,MAAMC,mBAAkB,GAAIR,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;UACxCK,MAAK,GAAIA,MAAM,CAACI,MAAM,CAACd,MAAM,CAAC;UAC9BU,MAAK,GAAIA,MAAM,CAACI,MAAM,CAACT,KAAK,CAACO,IAAI,EAAE,EAAE,CAAC,CAAC;UACvCF,MAAK,GAAIA,MAAM,CAACI,MAAM,CAACD,mBAAmB,CAAC;QAC7C,CAAC,CAAC;QACF,OAAOH,MAAM;MACf;MAEA,MAAMD,UAAS,GAAI,CACjB,iBAAiB,EACjB,uBAAuB,EACvB,0BAA0B,EAC1B,oBAAmB,CACpB;MAED,SAASM,IAAIA,CAACC,GAAG,EAAEC,GAAG,EAAE;QACtB,OAAOD,GAAE,GAAIE,IAAI,CAACC,MAAM,CAAC,KAAKF,GAAE,GAAID,GAAG,IAAI,CAAC;MAC9C;MAEA,MAAMN,MAAK,GAAIF,QAAQ,CAACC,UAAU,CAAC;MAEnC,SAASW,OAAOA,CAAA,EAAG;QACjB,MAAMC,OAAM,GAAIX,MAAM,CAACY,KAAK,CAAC,CAAC;QAC9B3B,GAAG,CAAC0B,OAAO,CAAC;QACZX,MAAM,CAACP,IAAI,CAACkB,OAAO,CAAC;QACpBE,UAAU,CAACH,OAAO,EAAEL,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;MACpC;MAEAK,OAAO,CAAC,CAAC;IACX;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}